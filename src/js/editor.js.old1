var editor = function(elem) {
	return {
		root: elem,
		src: "",
		line: 0,
		lastFocus: null,
		lastPos: 0,
		currElem: function() {
			var f = window.getSelection().focusNode;
			if (f && f.parentNode) {
				if (f.nodeType === 3) {
					this.lastFocus = f.parentNode;
					this.lastPos = window.getSelection().getRangeAt(0).startOffset;
				} else {
					this.lastFocus = f;
					this.lastPos = 0;					
				}
			}
			return this.lastFocus;
		},
		newElem: function(currElem, tag) {
			var el = document.elem(tag ? tag : 'span', this.root, currElem || this.currElem());
			this.lastFocus = el;
			return el;
		},
		setFocus: function(elem, pos) {
			var sel = window.getSelection();
			var r = document.createRange();
//			r.selectNode(elem.firstChild);
			try {
				r.setStart(elem.firstChild || elem, pos);
				r.setEnd(elem.firstChild || elem, pos);
			} catch (e){}
//			r.collapse();
			sel.removeAllRanges();
			sel.addRange(r);
			this.lastFocus = elem;
			this.lastPos = pos;
		},
		init: function() {
			this.root.add(document.elem('<div><span>&zwnj;</span></div>')); 
			var _this = this;
//			this.root.on('keyup', function() {
//				_this.currElem();
//			});
			this.root.on('focus', function(e) {
//				var sel = window.getSelection();
//				sel.removeAllRanges();
//				sel.addRange(this.r);
////				_this.setFocus(_this.lastFocus, _this.lastPos);
//				e.preventDefault();
//				e.stopPropagation();
			});
			this.root.on('keydown cut', function(e) {
				var c = e.which || e.keyCode;
				// tab, backspace, delete, enter
				if (c === 9 || c === 8 || c === 127 || c === 13 || e.type.toLowerCase() === 'cut') {
					var sel = window.getSelection();
					var r = sel.getRangeAt(0);
					if (r.startOffset > 0) setTimeout(function() {
						_this.syntaxCheck(r.startContainer.parentNode);
						console.log(r.startContainer.parentNode);
					}, 1);
					if (r.startContainer != r.endContainer && 
							r.endOffset < r.endContainer.textContent.length) setTimeout(function() {
						_this.syntaxCheck(r.endContainer.parentNode);
						console.log(r.endContainer.parentNode);
					}, 1);
					// if we delete everything re-initialize the editor
					setTimeout(function() {
						console.log('html', _this.root.innerHTML, '-');
						console.log('html', _this.root.innerText, '-');
						if (_this.root.childNodes.length === 1 &&  _this.root.firstChild.innerHTML === '') {
							_this.root.innerHTML = "";
							var el = document.elem('<div><span>&zwnj;</span></div>')
							_this.root.add(el);
							_this.setFocus(el.firstChild, 1);
						}					
					}, 1);
				}
				if (c === 9) {
					e.preventDefault();
					_this.handleKeyPress(c);
				}
			});
			this.root.on('paste', function(e) {
				e.preventDefault();
				e.stopPropagation();
				console.log(e);
				var str = e.clipboardData.getData('text/plain');
				for (var i = 0; i < str.length; i++) {
					_this.handleKeyPress(str.charCodeAt(i), true);
				}
			});
			this.root.on('keypress', function(e) {
				_this.handleKeyPress(e.which)
			});
			return this;
		},
		handleKeyPress: function(c, typeIn) {
			var el = this.currElem();
			if (!el.attr('hasqoute')) {
				var tag;
				if (c === 9) {
//					el.parentElement.innerHTML += '\t';
					if (el.tagName !== 'PRE') {
						tag = 'pre';
					}
					var newEl = document.elem('<b>\t</b>');
					el.addAfter(newEl);
					el = newEl;
//					tag = 'span';
				} else if (c === 32) {
					if (el.tagName !== 'B') {
						tag = 'b';
					}
				} else if (c === 13) {
//					while (el.parentElement !== this.root) {
//						el = el.parentElement;
//					}
//					tag = 'div';
				} else if ((c >= 33 && c <= 47) || (c >= 58 && c <= 64) || (c >= 91 && c <= 94) || (c >= 123 && c <= 126)) {
					if (el.tagName !== 'I') {
						tag = 'i';
					}
				} else if (c >= 48) {
					if (el.tagName !== 'SPAN') {
						tag = 'span';
					}
				}
				if (tag) {
					var newEl;	
					this.syntaxCheck(el);
					if (tag == 'div') {
						newEl = document.elem('<div><span>&zwnj;</span></div>');	
					} else {
						newEl = document.elem('<' + tag + '>&zwnj;' + (typeIn ? String.fromCharCode(c) : '') + '</' + tag + '>');
					}
					el.addAfter(newEl);
					if (el.tagName === 'PRE') {
						el.remove();
					} else if (el.innerHTML[0] === '\u200C') {
						el.innerHTML = el.innerHTML.substring(1);
					}
					this.setFocus(newEl.firsChild || newEl, 1);
				} else if (typeIn) {
					var sel = window.getSelection();
					var r = sel.getRangeAt(0);
					
					 String.fromCharCode(c);
				}
			}
		},
		lastFocus: null,
		lastPos: 0,
		syntaxCheck: function(elem) {
			var color = this.reservedWords[elem.innerHTML];
			if (color) elem.style.color = color;
		},
		reservedWords: {'for': 'red'},
		type: function(ch, meta, ctrl, alt) {
			if (this.currElem == null || this.currElem.tagName.toLowerCase() !== 'span') {
				this.newToken();
			}
			str = this.currElem.innerHTML;
			if (meta) {
				if (ch === 68) {//meta+D
					this.deleteLine();
				}
			} else if (ch === 8) {//backspace
				if (this.pos === 0) {
					this.deleteLine();
				}
				this.currElem.innerHTML = str.substring(0, this.pos - 1) + str.substring(this.pos, str.length);
				this.pos--;
			} else if (ch === 46) {//delete
				this.currElem.innerHTML = str.substring(0, this.pos) + str.substring(this.pos + 1, str.length);
			} else if (ch === 13) {//enter
				this.currElem = Oo('div')[0];
				this.root.appendChild(this.currElem);
				this.pos = 0;
				this.line++;
				this.type(27);
			} else if (ch === 37) {//left
				this.pos = Math.max(this.pos - 1, 0);
			} else if (ch === 38) {//up
				this.line = Math.max(this.line - 1, 0);
				this.currElem = this.root.childNodes[this.line];
				this.pos = Math.min(this.pos, this.currElem.innerHTML.length);
			} else if (ch === 39) {//right
				this.pos = Math.min(this.pos + 1, this.currElem.innerHTML.length);
			} else if (ch === 40) {//down
				this.line = Math.min(this.line + 1, this.root.childNodes.length - 1);
				this.currElem = this.root.childNodes[this.line];
				this.pos = Math.min(this.pos, this.currElem.innerHTML.length);
			} else {
				this.currElem.innerHTML = str.substring(0, this.pos) + String.fromCharCode(ch) + str.substring(this.pos, str.length);
				this.pos++;
			}
            var range = document.createRange();
//	        range.setStartAfter(this.currElem);
	        range.setStart(this.currElem.firstChild, this.pos);
	        range.setEnd(this.currElem.firstChild, this.pos);
	        console.log(this.currElem.innerHTML, this.line, this.pos);
//            range.setEndBefore(this.currElem);
            
	        window.getSelection().removeAllRanges();
	        window.getSelection().addRange(range);
	        
//	        range.move('character', this.pos);
//	        range.select();
		}, 
		deleteLine: function() {
			this.root.removeChild(this.root.childNodes[this.line]);
		}
	};
}

new $cheeta.Directive('editor.').onAttach(function(elem, attrName, parentModels) {
	this.resolveModelNames(elem, attrName, parentModels);
	elem.__editor_ = new editor(elem).init();
	$cheeta(elem).attr("contentEditable", "true");
	$cheeta(elem).on("paste change keypress", function(e) {
	});
	
//	$cheeta(elem).on("keydown", function(e) {
//		var c = e.keyCode;
//		if (c == 8) {
//			e.preventDefault();
//			e.stopPropagation();
//			e.target.__editor_.type(e.keyCode, e.metaKey);
//		}
//		console.log(e.keyCode);
//	});
//	$cheeta(elem).on("keypress", function(e) {
//		e.preventDefault();
//		e.stopPropagation();
//		e.target.__editor_.type(e.keyCode);
//	});
//	
	setTimeout(function() {
		var _tmp__editor_fn__ = function() {
			return editor.src;
		};
//		eval(elem.getAttribute(attrName) + '=_tmp__editor_fn__()');
	}, 0);

});
